group: LiteralsTest
    case: Identifier
        python:
            simple_ident

        python:
            simple_ident


    case: FloatLiteral
        python:
            3.45

        python:
            3.45


    case: FloatLiteralWithF
        python:
            3.45

        python:
            3.45


    case: LongLiteral
        python:
            345L

        python:
            345L

    case: ExponentialLiteral
        python:
            1.0E26

        python:
            1.0E26

    case: NullLiteral
        python:
            None

        python:
            None


    case: TrueLiteral
        python:
            True

        python:
            True


    case: FalseLiteral
        python:
            False

        python:
            False


    case: IntegerDecimalLiteral
        python:
            345

        python:
            345


    case: IntegerBinaryLiteral
        python:
            0b1010

        python:
            0b1010


    case: IntegerHexLiteral
        python:
            0xABC

        python:
            0xABC


    case: StringLiteral
        python:
            "abc"

        python:
            "abc"

    case: StringLiteralWithEscape
        python:
            "abc \n\t\r"

        python:
            "abc \n\t\r"

    case: StringRawLiteral
        python:
            r"abc\t \n \r"

        python:
            r"abc\t \n \r"


    case: StringFormatLiteral
        python:
            f"abc {abc} \t"

        python:
            f"abc {abc} \t"


    case: ListLiteral
        python:
            [1, 2, 3, a, b]

        python:
            [1, 2, 3, a, b]


    case: TupleLiteral
        python:
            (a, b, 10.3)

        python:
            (a, b, 10.3)


    case: DictLiteral
        python:
            {"a": b, "x": y}

        python:
            {"a": b, "x": y}


group: SimpleExpressionsTest
    case: PlusOp
        python:
            a + 5

        python:
            a + 5


    case: SubOp
        python:
            x - y

        python:
            x - y


    case: MulOp
        python:
            x * y

        python:
            x * y


    case: DivOp
        python:
            x / y

        python:
            x / y


    case: FloorDivOp
        python:
            x // y

        python:
            x // y


    case: IncrementOp
        python:
            x += 1

        python:
            x += 1


    case: DecrementOp
        python:
            x -= 1

        python:
            x -= 1


    case: UnaryMinusOp
        python:
            -x

        python:
            -x


    case: UnaryPlusOp
        python:
            +x

        python:
            +x


    case: ModOp
        python:
            x % y

        python:
            x % y


    case: PowOp
        python:
            x ** y

        python:
            x ** y


    case: AndOp
        python:
            x and y

        python:
            x and y


    case: OrOp
        python:
            x or y

        python:
            x or y


    case: BitwiseAndOp
        python:
            x & y

        python:
            x & y


    case: BitwiseOrOp
        python:
            x | y

        python:
            x | y


    case: BitwiseNotOp
        python:
            ~x

        python:
            ~x


    case: BitwiseXorOp
        python:
            x ^ y

        python:
            x ^ y


    case: NotOp
        python:
            not x

        python:
            not x


    case: BitwiseLeftShiftOp
        python:
            x << y

        python:
            x << y


    case: BitwiseRightShiftOp
        python:
            x >> y

        python:
            x >> y


    case: TernaryOp
        python:
            x if a else y

        python:
            x if a else y


    case: AssignmentExpr
        python:
            x := b

        python:
            x := b


    case: MemberAccess
        python:
            x.a.b.c

        python:
            x.a.b.c


    case: FunctionCallWithoutArguments
        python:
            hello()

        python:
            hello()


    case: FunctionCallWithArguments
        python:
            hello(a, b, 10.3, "abc")

        python:
            hello(a, b, 10.3, "abc")


    case: Indexing
        python:
            x[10]

        python:
            x[10]


    case: ManyIndexes
        python:
            x[10][y]

        python:
            x[10][y]


    case: CommaSeparatedIndex
        python:
            x[10, y]

        python:
            x[10, y]


group: ComparisonsTest
    case: LessOp
        python:
            a < b

        python:
            a < b


    case: LessEqualOp
        python:
            a <= b

        python:
            a <= b


    case: GreaterEqualOp
        python:
            a >= b

        python:
            a >= b


    case: GreaterOp
        python:
            a > b

        python:
            a > b


    case: EqOp
        python:
            a == b

        python:
            a == b


    case: NotEqOp
        python:
            a != b

        python:
            a != b


    case: CompoundComparisonConvertationCase1
        main python:
            a <= b and c <= k and b >= c

        alt python:
            c <= b and a <= b and c <= k


    case: CompoundComparisonConvertationCase2
        main python:
            a < c and a < b and d > k and b > m and c > b and a > m

        alt python:
            m < a < b < c and k < d

        alt python:
            k < d and m < a < b < c


    case: CompoundComparisonConvertationCase3
        main python:
            a < b and m >= k and x >= y

        alt python:
            a < b and m >= k and x >= y

        alt python:
            a < b and y <= x and k <= m


    case: CompoundComparisonConvertationCase4
        main python:
            a < b and b < c and m >= k

        alt python:
            a < b < c and m >= k

        alt python:
            a < b < c and k <= m

    case: CompoundComparisonConvertationCase5
        main python:
            a < b and m >= k and b < c

        python:
            a < b < c and k <= m


    case: CompoundComparisonConvertationCase6
        main python:
            a < b and a == b and b >= c

        python:
            c <= b and a < b and a == b


    case: CompoundComparisonConvertationCase7
        main python:
            a < b and a < c

        python:
            a < b and a < c


    case: CompoundComparisonConvertationCase7
        main python:
            a < b and b < c and c < a

        python:
            a < b and b < c and c < a


group: SimpleStatements
    case: VariableDeclaration
        python:
            a: int = 456
        python:
            a: int = 456

    case: MultipleVariableDeclaration
        python:
            a, b, c: int = 456, 4, k
        python:
            a, b, c: int = 456, 4, k

    case: AugmentedAssignmentStmt
        python:
            a: int = 456
            a += 3
            a -= 3
            a *= b
            a >>= b
            a <<= b
            a /= 5
            a //= 6
            a %= t
            a &= b
            c |= t
            v ^= m

        python:
            a: int = 456
            a += 3
            a -= 3
            a *= b
            a >>= b
            a <<= b
            a /= 5
            a //= 6
            a %= t
            a &= b
            c |= t
            v ^= m


    case: AssignmentStmt
        python:
            a: int = 456
            a = 3

        python:
            a: int = 456
            a = 3


    case: PassStatement
        python:
            if a:
                pass

        python:
            if a:
                pass


    case: MultipleAssignment
        python:
            a, b, c = 3, 45, 77

        python:
            a, b, c = 3, 45, 77


    case: VariableSwapping
        python:
            a, b = b, a

        python:
            a, b = b, a


group: Conditions
    case: IfElseCompound
        python:
            if a > 0:
                a += 1
                k = x + 1

        python:
            if a > 0:
                a += 1
                k = x + 1


    case: OnlyIf
        python:
            if a >= 0:
                t()
                x()

        python:
            if a >= 0:
                t()
                x()


    case: NestedOnlyIfCompound
        python:
            if a > 0:
                if k:
                    print("a")
                    print("b")

        python:
            if a > 0:
                if k:
                    print("a")
                    print("b")


    case: OneAlternative
        python:
            if a:
                pass
            elif b:
                pass

        python:
            if a:
                pass
            elif b:
                pass


    case: OneAlternativeWithElse
        python:
            if a:
                pass
            elif b:
                pass
            else:
                c = k * 3

        python:
            if a:
                pass
            elif b:
                pass
            else:
                c = k * 3


    case: TwoAlternativesWithElseCompound
        python:
            if a:
                b = a * 3
                x += 1
            elif b:
                b = m * 3
                x += 1
            elif c:
                k = l * 3
                x += 1
            else:
                d *= 5
                x += 1

        python:
            if a:
                b = a * 3
                x += 1
            elif b:
                b = m * 3
                x += 1
            elif c:
                k = l * 3
                x += 1
            else:
                d *= 5
                x += 1


    case: NestedAlternativesCompound
        python:
            if a > b:
                z += 1
                if x and y:
                    if x == 7:
                        x += 1
                    c += 1
                c += 1
            elif a < b:
                x += 1
                if x > 5:
                    if x != 7:
                        print("alarm")
                    elif x > 3:
                        i_am_here
                    else:
                        k += 1
                    c += 1
                y -= 1

        python:
            if a > b:
                z += 1
                if x and y:
                    if x == 7:
                        x += 1
                    c += 1
                c += 1
            elif a < b:
                x += 1
                if x > 5:
                    if x != 7:
                        print("alarm")
                    elif x > 3:
                        i_am_here
                    else:
                        k += 1
                    c += 1
                y -= 1


group: ForLoop
    case: RangeForLoop
        python:
            for i in range(1, 10, c):
                func(a)

        python:
            for i in range(1, 10, c):
                func(a)


    case: RangeForLoopWithExpressions
        python:
            for var in range(a * b * c, dx - 1, 1):
                func(a)

        python:
            for var in range(a * b * c, dx - 1, 1):
                func(a)


    case: ForEachLoop
        python:
            for a in b:
                x += 4

        python:
            for a in b:
                x += 4


group: WhileLoop
    case: SimpleWhileLoop
        python:
            while x != m:
                g()
                f()

        python:
            while x != m:
                g()
                f()


    case: WhileLoopWithBreak
        python:
            while started():
                do_work()
                if has_errors():
                    break

        python:
            while started():
                do_work()
                if has_errors():
                    break


    case: WhileLoopWithEmptyBody
        python:
            while True:
                pass

        python:
            while True:
                pass


group: Other
    case: Import
        python:
            import a.b.c

        python:
            import a.b.c


    case: ImportFrom
        python:
            from a.b import c

        python:
            from a.b import c


    case: ImportFromAs
        python:
            from a.b import c as t

        python:
            from a.b import c as t


    case: MultilineComment
        python:
            """
            abc\t
            def
            """

        python:
            """
            abc\t
            def
            """


    case: SinglelineComment
        python:
            # abc

        python:
            # abc


    case: ListUnpacking
        python:
            def a(t: T, *args: int) -> int:
                return t + sum(args)

        python:
            def a(t: T, *args: int) -> int:
                return t + sum(args)


    case: ParenthesizedExpression
        python:
            (a + b * c) + 6 * (a := 3)

        python:
            (a + b * c) + 6 * (a := 3)


    case: StandardEntryPoint
        python:
            from funcs import func
            a: int = 1

            def run():
                func(a)
                return 0

            if __name == "__main__":
                main()


        python:
            from funcs import func
            a: int = 1

            def run():
                func(a)
                return 0

            if __name == "__main__":
                main()


    case: ListComprehensionWithoutIf
        python:
            func([i for i in range(1, 100)])
        python:
            func([i for i in range(1, 100)])


    case: ListComprehension
        python:
            func([i for i in range(1, 100) if i < 50])
        python:
            func([i for i in range(1, 100) if i < 50])


    case: DictComprehension
        python:
            func({i: 5 for i in range(1, 100) if i < 50})
        python:
            func({i: 5 for i in range(1, 100) if i < 50})


    case: SetComprehension
        python:
            func({i for i in range(1, 100) if i < 50})
        python:
            func({i for i in range(1, 100) if i < 50})


    case: TupleComprehension
        python:
            func((i for i in range(1, 100) if i < 50))
        python:
            func((i for i in range(1, 100) if i < 50))


group: StructuresOOP
    case: MethodCustomSelfReference
        main python:
            class A:
                def main(ins, k):
                    return ins.tree + ins.method()

        python:
            class A:
                def main(self, k):
                    return self.tree + self.method()
    case: FullClass
        python:
            class A(MyClass1, MyClass3):
                field1 = 3
                field2: str = "abcj"

                def __init__(self):
                    print("constructor!!!1")

                def __del__(self):
                    free_all()
                    print("DESTRUCTOR")

                def my_method(self, k):
                    self.my_method2()

                def my_method2(self, key):
                    feature()

                @staticmethod
                def staticfunc():
                    self = "a"
                    self += "b"
                    return A.unknown.self()

                @classmethod
                def anothercls(cls: A, p):
                    return cls(p)

                @property
                def my_prop(self):
                    return 1.0E31
        python:
            class A(MyClass1, MyClass3):
                field1 = 3
                field2: str = "abcj"

                def __init__(self):
                    print("constructor!!!1")

                def __del__(self):
                    free_all()
                    print("DESTRUCTOR")

                def my_method(self, k):
                    self.my_method2()

                def my_method2(self, key):
                    feature()

                @staticmethod
                def staticfunc():
                    self = "a"
                    self += "b"
                    return A.unknown.self()

                @classmethod
                def anothercls(cls: A, p):
                    return cls(p)

                @property
                def my_prop(self):
                    return 1.0E31






